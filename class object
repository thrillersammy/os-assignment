#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Define the Process structure
struct Process {
    int pid;            // Process ID
    char name[50];      // Process name
    int priority;       // Process priority
    int state;          // Process state (e.g., running, ready, blocked)
};

// Initialize a Process object
struct Process* initProcess(int pid, const char* name, int priority, int state) {
    // Allocate memory for the Process object
    struct Process* process = (struct Process*)malloc(sizeof(struct Process));
    if (process == NULL) {
        fprintf(stderr, "Memory allocation failed.\n");
        exit(EXIT_FAILURE);
    }

    // Initialize the Process object with provided values
    process->pid = pid;
    strncpy(process->name, name, sizeof(process->name) - 1);
    process->priority = priority;
    process->state = state;

    return process;
}

// Display information about a Process object
void displayProcess(struct Process* process) {
    printf("Process ID: %d\n", process->pid);
    printf("Name: %s\n", process->name);
    printf("Priority: %d\n", process->priority);
    printf("State: %d\n", process->state);
}

// Main function to demonstrate the usage of Process objects
int main() {
    // Create a Process object
    struct Process* process1 = initProcess(1001, "Process A", 1, 0);

    // Display information about the Process object
    printf("Process Information:\n");
    displayProcess(process1);

    // Free memory allocated for the Process object
    free(process1);

    return 0;
}
by smriti 
